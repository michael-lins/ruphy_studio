<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Ruphy Studio</title>
  <style>
    body {
      margin: 0;
      font-family: Arial, sans-serif;
      background: #f4f4f9;
      overflow: hidden;
    }

    /* Projects Page */
    #projects-page {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 100vh;
      background: #f4f4f9;
    }

    #projects-page h1 {
      margin-bottom: 20px;
      font-size: 24px;
    }

    #projects-page button {
      padding: 12px 24px;
      font-size: 18px;
      background: #4caf50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }

    /* Modal */
    #modal {
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      background: #fff;
      z-index: 9999;
      display: none;
      flex-direction: column;
    }

    #top-bar {
      height: 50px;
      background: #4caf50;
      color: white;
      display: flex;
      align-items: center;
      padding: 0 20px;
    }

    #close-modal {
      background: none;
      border: none;
      color: white;
      font-size: 18px;
      cursor: pointer;
    }

    /* 3D Cube Container */
    #cube-container {
      flex: 1;
      display: flex;
      justify-content: center;
      align-items: center;
      perspective: calc(100vmin * 1.5);
      overflow: hidden;
    }

    /* Cube */
    #cube {
      width: 60.5%;
      height: 60.5%;
      transform-style: preserve-3d;
      transform: rotateX(0deg) rotateY(0deg);
      transition: transform 1s ease-in-out;
    }

    .cube-face {
      position: absolute;
      float: right;
      width: 100%;
      height: 100%;
      background: rgba(255, 255, 255, 0.8);
      border: 2px solid #ccc;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      font-size: 24px;
      font-weight: bold;
      box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.3);
    }

    /* Positioning Faces */
    .face-front  { transform: rotateY(  0deg) translateZ(60vmin); background: rgba(255, 153, 153, 0.6); }
    .face-back   { transform: rotateY(180deg) translateZ(60vmin); background: rgba(153, 204, 255, 0.6); }
    .face-left   { transform: rotateY(-90deg) translateZ(60vmin); background: rgba(153, 255, 153, 0.6); }
    .face-right  { transform: rotateY( 90deg) translateZ(60vmin); background: rgba(255, 255, 153, 0.6); }
    .face-top    { transform: rotateX( 90deg) translateZ(60vmin); background: rgba(255, 204, 153, 0.6); }
    .face-bottom { transform: rotateX(-90deg) translateZ(60vmin); background: rgba(204, 153, 255, 0.6); }

    /* Radial Menu */
    .radial-menu {
      position: fixed;
      bottom: 20px;
      right: 20px;
      width: 80px;
      height: 80px;
      border-radius: 50%;
      display: flex;
      justify-content: center;
      align-items: center;
      background: rgba(0, 0, 0, 0.2);
      transition: opacity 0.3s ease-in-out, transform 0.5s ease;
      z-index: 9999;
      cursor: grab;
    }

    .menu-center {
      width: 50px;
      height: 50px;
      background: #ff5555;
      border-radius: 50%;
      display: flex;
      justify-content: center;
      align-items: center;
      color: white;
      font-size: 18px;
      font-weight: bold;
      cursor: pointer;
      transition: opacity 0.5s ease, transform 0.5s ease;
      opacity: 0.8;
    }

    .menu-item {
      position: absolute;
      width: 60px;
      height: 60px;
      background: #4caf50;
      border-radius: 50%;
      display: flex;
      justify-content: center;
      align-items: center;
      text-align: center;
      color: white;
      font-size: 16px;
      cursor: pointer;
      transform: scale(0);
      opacity: 0;
      transition: transform 0.3s ease-in-out, opacity 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
      box-shadow: 0 0 0 rgba(255, 255, 255, 0);
    }

    .menu-item.visible {
      transform: scale(1);
      opacity: 1;
      box-shadow: 0 0 10px rgba(255, 255, 255, 0.8);
    }

    .menu-item:hover {
      box-shadow: 0 0 10px rgba(255, 255, 255, 1);
    }
  </style>
</head>
<body>
  <!-- Projects Page -->
  <div id="projects-page">
    <h1>Welcome to Ruphy Studio</h1>
    <button onclick="openModal()">Open Project Editor</button>
  </div>

  <!-- Modal -->
  <div id="modal">
    <!-- Top Bar -->
    <div id="top-bar">
      <button id="close-modal" onclick="closeModal()">‚Üê Back</button>
      <span>Project Editor</span>
    </div>

    <!-- Cube Container -->
    <div id="cube-container">
      <div id="cube">
        <div class="cube-face face-front">Front</div>
        <div class="cube-face face-back">Back</div>
        <div class="cube-face face-left">Left</div>
        <div class="cube-face face-right">Right</div>
        <div class="cube-face face-top">Top</div>
        <div class="cube-face face-bottom">Bottom</div>
      </div>
    </div>

    <!-- Radial Menu -->
    <div class="radial-menu" id="radial-menu">
      <div class="menu-center">Rails</div>
      <div class="menu-item" data-face="front">Ruby UI View</div>
      <div class="menu-item" data-face="back">Models</div>
      <div class="menu-item" data-face="left">Controllers</div>
      <div class="menu-item" data-face="right">Gems</div>
      <div class="menu-item" data-face="top">Routes</div>
      <div class="menu-item" data-face="bottom">Help</div>
    </div>
  </div>

  <script>
    let currentX = 0;
    let currentY = 0;

    function openModal() {
      document.getElementById('modal').style.display = 'flex';
    }

    function closeModal() {
      document.getElementById('modal').style.display = 'none';
    }

    function toggleMenu() {
      const items = document.querySelectorAll('.menu-item');
      const menu = document.getElementById('radial-menu');

      const rect = menu.getBoundingClientRect();
      if (rect.left < 100) menu.style.left = "100px";
      if (rect.top < 100) menu.style.top = "100px";
      if (window.innerWidth - rect.right < 100) menu.style.left = `${window.innerWidth - 100 - rect.width}px`;
      if (window.innerHeight - rect.bottom < 100) menu.style.top = `${window.innerHeight - 100 - rect.height}px`;

      const menuVisible = items[0].classList.contains('visible');

      if (!menuVisible) {
        items.forEach((item, index) => {
          setTimeout(() => {
            item.style.transform = `rotate(${index * 60}deg) translate(80px) rotate(${-index * 60}deg)`;
            item.classList.add('visible');
          }, index * 100);
        });
      } else {
        items.forEach((item, index) => {
          setTimeout(() => {
            item.style.transform = `rotate(${index * 60}deg) translate(0px) rotate(${-index * 60}deg)`;
            item.classList.remove('visible');
          }, index * 100);
        });
      }
    }

    function rotateCubeToFace(face) {
      const cube = document.getElementById('cube');
      const rotations = {
        front: { x: 0, y: 0 },
        back: { x: 0, y: 180 },
        left: { x: 0, y: -90 },
        right: { x: 0, y: 90 },
        top: { x: -90, y: 0 },
        bottom: { x: 90, y: 0 },
      };

      const { x, y } = rotations[face];
      currentX = x;
      currentY = y;

      cube.style.transform = `rotateX(${x}deg) rotateY(${y}deg)`;
    }

    document.querySelectorAll('.menu-item').forEach((item) => {
      item.addEventListener('click', () => {
        const face = item.dataset.face;
        rotateCubeToFace(face);
      });
    });

    // Make the radial menu draggable
    const radialMenu = document.getElementById("radial-menu");
    let isDragging = false;
    let startX, startY;

    radialMenu.addEventListener("click", (e) => {
      if (isDragging) {
        // Prevent click behavior if it was a drag
        e.preventDefault();
        e.stopPropagation();
      } else {
        // Proceed with click behavior
        toggleMenu();
        e.stopPropagation();
      }
    });

    radialMenu.addEventListener("mousedown", (e) => {
      isDragging = true;
      startX = e.clientX - radialMenu.offsetLeft;
      startY = e.clientY - radialMenu.offsetTop;
      radialMenu.style.cursor = "grabbing";
    });

    document.addEventListener("mousemove", (e) => {
      if (!isDragging) return;
      const x = e.clientX - startX;
      const y = e.clientY - startY;
      radialMenu.style.left = `${x}px`;
      radialMenu.style.top = `${y}px`;
    });

    document.addEventListener("mouseup", () => {
      isDragging = false;
      radialMenu.style.cursor = "grab";
    });
  </script>
</body>
</html>